// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum RequestType {
  list
  article
}

enum SourceType {
  businessinsider
  ghost
}

enum TargetType {
  wordpress
  ghost
}

enum UserRole {
  admin
  pro
  hacker
}

model sources {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  url      String
  type     SourceType // constrained to selected type
  requests requests[]
  user     users      @relation(fields: [user_id], references: [id])
  user_id  String     @db.ObjectId
}

model requests {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  created_at  DateTime    @default(now())
  type        RequestType
  source      sources     @relation(fields: [source_id], references: [id], onDelete: Cascade)
  source_id   String      @db.ObjectId
  response_at DateTime?
  error       String?
  data        Json?
  url         String
  code        Int?
  user        users       @relation(fields: [user_id], references: [id])
  user_id     String      @db.ObjectId
  articles    articles[]
}

type Component {
  id            String
  xpath         String[]
  text          String
  finish_reason String   @default("")
  ai_requests   String[] @default([]) @db.ObjectId
}

enum ArticleState {
  new
  queued
  rejected
  verification
  published
}

type TargetAuthType {
  username String?
  password String?
  key      String?
}

enum OperationType {
  add
  remove
  replace
  move
  copy
  test
}

type Operation {
  op    OperationType
  from  Json?
  path  String?
  value Json?
}

type ArticleVersion {
  hash       String
  up         Operation[]
  down       Operation[]
  created_at DateTime    @default(now())
}

model articles {
  id                     String                @id @default(auto()) @map("_id") @db.ObjectId
  hash                   String
  title                  String
  source_url             String
  components             Component[]
  state                  ArticleState          @default(new)
  user                   users                 @relation(fields: [user_id], references: [id])
  user_id                String                @db.ObjectId
  request                requests?             @relation(fields: [request_id], references: [id], onDelete: Cascade)
  request_id             String?               @db.ObjectId
  processing_template    processing_templates? @relation(fields: [processing_template_id], references: [id])
  processing_template_id String?               @db.ObjectId
  versions               ArticleVersion[]

  @@unique([id, user_id])
}

model contexts {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  value   String
  user    users  @relation(fields: [user_id], references: [id])
  user_id String @db.ObjectId

  @@unique([id, user_id])
  @@unique([value, user_id])
}

model prompts {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  value   String
  user    users  @relation(fields: [user_id], references: [id])
  user_id String @db.ObjectId

  @@unique([id, user_id])
  @@unique([value, user_id])
}

model processing_templates {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  context          String
  header_prompt    String
  paragraph_prompt String
  code_prompt      String
  user             users      @relation(fields: [user_id], references: [id])
  user_id          String     @db.ObjectId
  articles         articles[]
}

model targets {
  id      String         @id @default(auto()) @map("_id") @db.ObjectId
  url     String
  auth    TargetAuthType
  type    TargetType
  user    users          @relation(fields: [user_id], references: [id])
  user_id String         @db.ObjectId
}

model payments {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       users    @relation(fields: [user_id], references: [id])
  user_id    String   @db.ObjectId
  cents      Int
  created_at DateTime
}

model users {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  email                String                 @unique
  avatar               String
  full_name            String
  targets              targets[]
  sources              sources[]
  requests             requests[]
  articles             articles[]
  prompts              prompts[]
  payments             payments[]
  roles                UserRole[]             @default([])
  gpt3_api_key         String?
  processing_templates processing_templates[]
  contexts             contexts[]
  exp_at               DateTime?
}

enum GptRole {
  assistant
  system
  user
}

type GptMessage {
  role    GptRole
  content String
}

type GptChoice {
  message       GptMessage
  index         Int
  finish_reason String
}

type GptUsage {
  prompt_tokens     Int
  completion_tokens Int
  total_tokens      Int
}

model ai_requests {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  model      String
  messages   GptMessage[]
  request_at DateTime     @default(now())
  gpt_id     String?
  object     String?
  created    DateTime?
  choices    GptChoice[]
  usage      GptUsage?
}

model error_logs {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  message    String
  stack      String
  name       String
  resolved   Boolean  @default(false)
  created_at DateTime @default(now())
  context    Json?
}
