// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum RequestType {
  list
  article
}

enum SourceType {
  buisnesinsider
  ghost
}

enum TargetType {
  wordpress
  ghost
}

enum UserRole {
  admin
}

model sources {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  url      String
  type     SourceType // constrained to selected type
  requests requests[]
  user     users      @relation(fields: [user_id], references: [id])
  user_id  String     @db.ObjectId
}

model requests {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  created_at  DateTime    @default(now())
  type        RequestType
  source      sources     @relation(fields: [source_id], references: [id], onDelete: Cascade)
  source_id   String      @db.ObjectId
  response_at DateTime?
  error       String?
  html        String?
  data        Json?
  url         String
  code        Int?
  user        users       @relation(fields: [user_id], references: [id])
  user_id     String      @db.ObjectId
  articles    articles[]
}

type ComponentVersion {
  replaced_at DateTime @default(now())
  text        String
}

type Component {
  xpath         String[]
  text          String
  finish_reason String             @default("")
  versions      ComponentVersion[]
}

enum ArticleState {
  new
  queued
  rejected
  verification
  published
}

type TargetAuthType {
  username String?
  password String?
  key      String?
}

model articles {
  id                     String                @id @default(auto()) @map("_id") @db.ObjectId
  components             Component[]
  state                  ArticleState          @default(new)
  user                   users                 @relation(fields: [user_id], references: [id])
  user_id                String                @db.ObjectId
  request                requests              @relation(fields: [request_id], references: [id], onDelete: Cascade)
  request_id             String                @db.ObjectId
  processing_template    processing_templates? @relation(fields: [processing_template_id], references: [id])
  processing_template_id String?               @db.ObjectId
}

model prompts {
  id               String                 @id @default(auto()) @map("_id") @db.ObjectId
  value            String
  user             users                  @relation(fields: [user_id], references: [id])
  user_id          String                 @db.ObjectId
  header_templates processing_templates[] @relation("header-template-prompt")
  text_templates   processing_templates[] @relation("text-template-prompt")
  code_templates   processing_templates[] @relation("code-template-prompt")

  @@unique([value, user_id])
}

model processing_templates {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  header    prompts?   @relation("header-template-prompt", fields: [header_id], references: [id])
  header_id String?    @db.ObjectId
  text      prompts?   @relation("text-template-prompt", fields: [text_id], references: [id])
  text_id   String?    @db.ObjectId
  code      prompts?   @relation("code-template-prompt", fields: [code_id], references: [id])
  code_id   String?    @db.ObjectId
  user      users      @relation(fields: [user_id], references: [id])
  user_id   String     @db.ObjectId
  articles  articles[]
}

model targets {
  id      String         @id @default(auto()) @map("_id") @db.ObjectId
  url     String
  auth    TargetAuthType
  type    TargetType
  user    users          @relation(fields: [user_id], references: [id])
  user_id String         @db.ObjectId
}

model users {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  email                String                 @unique
  avatar               String
  full_name            String
  targets              targets[]
  sources              sources[]
  requests             requests[]
  articles             articles[]
  prompts              prompts[]
  roles                UserRole[]             @default([])
  gpt3_api_key         String?
  processing_templates processing_templates[]
}

type GptChoice {
  text          String
  index         Int
  logprobs      String?
  finish_reason String
}

type GptUsage {
  prompt_tokens     Int
  completion_tokens Int
  total_tokens      Int
}

model ai_requests {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  model             String
  prompt            String
  temperature       Float
  max_tokens        Int
  top_p             Float
  frequency_penalty Float
  presence_penalty  Float
  request_at        DateTime    @default(now())
  gpt_id            String?
  object            String?
  created           DateTime?
  choices           GptChoice[]
  usage             GptUsage?
}

model error_logs {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  message    String
  stack      String
  name       String
  resolved   Boolean  @default(false)
  created_at DateTime @default(now())
  context    Json?
}
