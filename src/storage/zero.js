"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pull = exports.push = exports.ZeroMessage = void 0;
const zeromq_1 = require("zeromq");
const sleep_1 = require("../functions/sleep");
const prisma_1 = require("./prisma");
const gpt_1 = require("../functions/gpt");
const dayjs_1 = __importDefault(require("dayjs"));
const pushSocket = new zeromq_1.Push();
const pullSocket = new zeromq_1.Pull();
class ZeroMessage {
    constructor(articleId, apiKey) {
        this.article_id = articleId;
        this.api_key = apiKey;
    }
    toString() {
        return JSON.stringify({
            article_id: this.article_id,
            api_key: this.api_key,
        });
    }
    static parse(payload) {
        const { article_id, api_key } = JSON.parse(payload.toString());
        return new ZeroMessage(article_id, api_key);
    }
}
exports.ZeroMessage = ZeroMessage;
function push(message) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!pushSocket.writable) {
            yield pushSocket.bind("tcp://*:7777");
        }
        yield pushSocket.send(message.toString());
    });
}
exports.push = push;
// todo:
// potential: finish_reason
//
// completed: The conversation was completed successfully and a satisfactory response was generated by the API.
// timeout: The API failed to generate a response within the given time limit.
// incomplete: The API generated a response, but it was incomplete or not satisfactory.
// model_failure: The API failed to generate a response due to an internal error or model failure.
// technical_issues: The API was unable to complete the request due to technical issues, such as network connectivity problems or server downtime.
// user_error: The request failed because of an error on the user's side, such as invalid input or incorrect authentication credentials.
// permission_denied: The request was denied due to insufficient permissions or incorrect API key.
// unavailable: The API is currently unavailable or undergoing maintenance.
function getCommand(processing_template, component) {
    if (processing_template.text && component.xpath.some(tag => ["p", "blockquote", "li"].includes(tag))) {
        return processing_template.text.value;
    }
    else if (processing_template.code && component.xpath.some(tag => ["pre", "code"].includes(tag))) {
        return processing_template.code.value;
    }
    else if (processing_template.header && component.xpath.some(tag => ["h1", "h2", "h3", "h4", "h5", "h6"].includes(tag))) {
        return processing_template.header.value;
    }
    return '';
}
function pull() {
    var _a, e_1, _b, _c;
    var _d;
    return __awaiter(this, void 0, void 0, function* () {
        pullSocket.connect("tcp://localhost:7777");
        yield (0, sleep_1.sleep)(500);
        const articles = yield prisma_1.prisma.articles.findMany({
            where: {
                state: 'queued',
                user: {
                    gpt3_api_key: {
                        isSet: true,
                        not: ''
                    }
                }
            },
            include: {
                user: true
            }
        });
        for (const article of articles) {
            yield push(new ZeroMessage(article.id, (_d = article.user.gpt3_api_key) !== null && _d !== void 0 ? _d : ''));
        }
        try {
            for (var _e = true, pullSocket_1 = __asyncValues(pullSocket), pullSocket_1_1; pullSocket_1_1 = yield pullSocket_1.next(), _a = pullSocket_1_1.done, !_a;) {
                _c = pullSocket_1_1.value;
                _e = false;
                try {
                    const [articleIdBuffer] = _c;
                    console.time("queue");
                    const { article_id, api_key } = ZeroMessage.parse(articleIdBuffer);
                    if (!api_key) {
                        yield prisma_1.prisma.articles.update({
                            where: { id: article_id },
                            data: {
                                state: 'new'
                            }
                        });
                        continue;
                    }
                    const article = yield prisma_1.prisma.articles.findUnique({
                        where: { id: article_id }, include: {
                            processing_template: {
                                include: {
                                    text: {
                                        select: {
                                            value: true
                                        }
                                    },
                                    header: {
                                        select: {
                                            value: true
                                        }
                                    },
                                    code: {
                                        select: {
                                            value: true
                                        }
                                    }
                                }
                            }
                        }
                    });
                    if (!article || !article.processing_template) {
                        return;
                    }
                    const client = new gpt_1.GPT3(api_key);
                    for (const component of article.components) {
                        const command = getCommand(article.processing_template, component);
                        if (command.length) {
                            const { text, finish_reason } = yield client.ask(`${command}\n\n${component.text}`);
                            console.log(`${command}\n\n${component.text}`.blue);
                            console.log("[" + String(`${finish_reason}`.yellow) + "]" + String(`\t${text}`.green));
                            component.versions.push({ text: component.text, replaced_at: (0, dayjs_1.default)().toDate() });
                            component.text = text;
                            component.finish_reason = finish_reason;
                        }
                        else {
                            // no process this paragraph
                        }
                    }
                    yield prisma_1.prisma.articles.update({
                        where: { id: article_id },
                        data: {
                            components: article.components,
                            state: 'verification'
                        }
                    });
                    console.timeEnd("queue");
                }
                finally {
                    _e = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_e && !_a && (_b = pullSocket_1.return)) yield _b.call(pullSocket_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    });
}
exports.pull = pull;
